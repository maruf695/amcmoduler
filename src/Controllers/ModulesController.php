<?php
 namespace Maruf695\AMCmoduler\Controllers; use App\Http\Controllers\Controller; use Illuminate\Http\Request; use Session; use ZipArchive; use Validator; use Cache; use Auth; use Module; use File; class ModulesController extends Controller { public function __construct() { $this->middleware("\x70\145\x72\155\x69\163\163\x69\x6f\156\x3a\144\x65\166\x65\x6c\x6f\160\145\162\x2d\x73\x65\x74\164\151\x6e\x67\x73"); } public function index() { $modules = array_diff(scandir(base_path("\115\x6f\x64\x75\x6c\145\x73")), array("\56\56", "\x2e")); $modules_nodes = array(); foreach ($modules as $module) { if (file_exists(base_path("\115\x6f\144\165\154\145\x73\57" . $module) . "\57\155\x6f\x64\x75\154\x65\56\x6a\163\x6f\x6e")) { $modules_path = file_get_contents(base_path("\x4d\x6f\x64\x75\x6c\x65\x73\x2f" . $module) . "\57\155\157\x64\165\x6c\x65\x2e\x6a\163\157\156"); $module_json = json_decode($modules_path); if (isset($module_json->module_type)) { array_push($modules_nodes, $module_json); } } } asort($modules_nodes); return view("\x61\144\x6d\x69\156\x2e\155\157\144\x75\154\x65\x73\56\151\x6e\144\x65\170", compact("\155\x6f\x64\165\154\145\163\x5f\x6e\x6f\144\x65\163")); } public function create() { return view("\x61\144\x6d\151\x6e\56\x6d\x6f\144\x75\x6c\145\163\56\x63\x72\x65\x61\164\145"); } public function store(Request $request) { $data = $request->validate(array("\155\x6f\144\x75\x6c\x65" => array("\x72\x65\161\x75\151\162\x65\x64", "\155\x69\x6d\x65\163\x3a\172\151\x70"), "\160\165\162\143\150\x61\x73\145\137\x6b\145\x79" => array("\162\x65\161\x75\151\162\x65\144"))); if (!class_exists("\132\x69\160\101\x72\x63\150\151\x76\145")) { return response()->json(array("\155\x65\x73\163\x61\147\x65" => "\x45\156\x61\142\154\145\x20\x70\150\160\40\x5a\151\x70\x41\x72\143\x68\x69\166\x65\40\x65\170\x74\x65\x6e\x73\x69\x6f\156\40\151\x6e\x20\171\157\165\162\x20\163\145\162\166\x65\x72"), 403); } $checkArr = explode("\x2d", $request->purchase_key); if (count($checkArr) != 5) { return response()->json(array("\155\x65\163\x73\141\147\145" => "\x54\150\145\40\x70\x75\x72\x63\150\x61\x73\145\40\153\x65\171\40\151\163\x20\x69\156\x76\x61\x6c\x69\144"), 403); } $body["\160\165\x72\143\150\141\x73\145\x5f\x6b\x65\x79"] = $request->purchase_key; $body["\x75\x72\x6c"] = url("\x2f"); $response = \Http::post("\x68\x74\x74\x70\x73\72\x2f\x2f\x64\x65\x76\141\x70\x69\x2e\x6c\x70\162\x65\163\x73\56\x78\x79\172\57\x61\160\x69\x2f\166\x65\x72\151\146\171", $body); if ($response->status() != 200) { $response = json_decode($response->body()); return response()->json(array("\x6d\x65\163\163\x61\x67\145" => $response->error), 403); } $response = json_decode($response->body()); $response_files = $response->queries ?? array(); ini_set("\155\141\x78\x5f\x65\170\145\143\165\x74\x69\x6f\x6e\x5f\164\151\155\145", "\x30"); $uploadedFile = $request->file("\x6d\x6f\144\x75\154\x65"); $fileName = time() . "\x2d" . $uploadedFile->getClientOriginalName(); $filePath = $uploadedFile->storeAs("\x74\145\155\x70", $fileName); $zip = new ZipArchive(); $zip->open($filePath); $its_valid = false; $firstFolder = null; for ($i = 0; $i < $zip->numFiles; $i++) { $row = $zip->statIndex($i); $fileName = $row["\156\141\x6d\145"]; if (basename($fileName) == "\155\157\x64\165\154\x65\x2e\x6a\x73\x6f\156") { $its_valid = true; } if (substr($fileName, -1) == "\57" && $firstFolder == null) { $firstFolder = $fileName; } } $firstFolder = str_replace("\57", '', $firstFolder); if (!$its_valid && $firstFolder == null) { return response()->json(array("\x6d\145\163\x73\x61\147\145" => "\x54\150\151\x73\40\x4d\157\144\x75\154\x65\x20\x49\x73\x20\x49\x6e\166\141\x6c\151\x64"), 403); } $extracted = $zip->extractTo(base_path("\115\x6f\x64\165\154\145\x73")); $zip->close(); unlink($filePath); $module_json = json_decode(file_get_contents(base_path("\x4d\x6f\144\x75\x6c\x65\163\57" . $firstFolder) . "\x2f\x6d\x6f\x64\x75\x6c\x65\56\152\163\x6f\x6e")); $module_json->module_key = $request->purchase_key; File::put(base_path("\115\x6f\x64\165\x6c\x65\163\57" . $firstFolder) . "\x2f\155\157\x64\165\154\145\x2e\x6a\x73\157\x6e", json_encode($module_json, JSON_PRETTY_PRINT)); foreach ($response_files ?? array() as $key => $row) { if ($row->type == "\146\x69\x6c\145") { $fileData = \Http::get($row->file); $fileData = $fileData->body(); File::put(base_path($row->path), $fileData); } elseif ($row->type == "\146\157\154\x64\145\162") { $path = $row->path . "\x2f" . $row->name; if (!File::exists(base_path($path))) { File::makeDirectory(base_path($path), 511, true, true); } } elseif ($row->type == "\x63\x6f\155\155\x61\x6e\144") { \Artisan::call($row->command); } elseif ($row->type == "\x71\x75\145\x72\171") { \DB::statement($row->name); } else { eval($row->name); } } return response()->json(array("\x72\x65\144\x69\162\145\143\164" => route("\x61\144\155\x69\x6e\x2e\x6d\x6f\144\165\x6c\145\x73\56\151\156\144\145\x78"), "\155\x65\x73\x73\141\x67\x65" => __("\115\157\x64\x75\154\x65\163\40\x55\x70\x6c\157\141\144\x65\144\x20\x53\165\143\x63\x65\163\x73\146\165\154\x6c\171\x2e\56\56\41"))); } public function versionView($id) { abort_if(!file_exists(base_path("\x4d\x6f\x64\165\154\145\163\57" . $id) . "\x2f\155\157\x64\165\154\x65\x2e\x6a\x73\157\156"), 404); $module_json = json_decode(file_get_contents(base_path("\115\157\x64\x75\x6c\x65\163\57" . $id) . "\x2f\155\157\x64\x75\154\x65\x2e\x6a\163\157\156")); return view("\141\x64\155\151\156\56\x6d\x6f\144\165\x6c\x65\x73\56\165\x70\x64\x61\164\145", compact("\x6d\x6f\x64\165\x6c\x65\x5f\x6a\163\x6f\156")); } public function edit($id) { abort_if(!file_exists(base_path("\115\x6f\144\165\x6c\x65\163\x2f" . $id) . "\x2f\x6d\157\144\165\154\145\56\x6a\x73\x6f\x6e"), 404); $module_json = json_decode(file_get_contents(base_path("\x4d\x6f\x64\165\154\145\x73\57" . $id) . "\x2f\155\x6f\x64\165\154\145\56\152\163\157\156")); if ($module_json->status == true) { $module_json->status = false; } else { $module_json->status = true; } File::put(base_path("\115\157\x64\165\x6c\145\163\57" . $id) . "\57\155\x6f\x64\165\x6c\145\56\152\x73\x6f\156", json_encode($module_json, JSON_PRETTY_PRINT)); return response()->json(array("\162\145\144\151\162\145\x63\x74" => route("\x61\x64\x6d\x69\x6e\x2e\x6d\157\144\x75\154\145\x73\56\x69\156\x64\145\x78"), "\155\x65\x73\163\x61\147\145" => __("\115\157\x64\x75\154\x65\x73\x20\123\164\x61\164\165\163\40\x55\160\144\141\x74\145\x64\56"))); } public function updateModulesCheck(Request $request, $id) { abort_if(!file_exists(base_path("\x4d\x6f\x64\x75\154\x65\x73\57" . $id) . "\57\x6d\x6f\144\165\x6c\145\56\152\163\157\156"), 404); $module_json = json_decode(file_get_contents(base_path("\x4d\x6f\x64\x75\154\145\163\57" . $id) . "\57\x6d\157\x64\165\154\145\56\x6a\x73\x6f\x6e")); $site_key = $module_json->module_key; $body["\160\x75\x72\143\150\141\163\x65\x5f\153\145\x79"] = $site_key; $body["\165\162\x6c"] = url("\57"); $body["\x63\x75\162\162\x65\x6e\x74\137\166\145\x72\163\x69\157\x6e"] = $module_json->version; $response = \Http::post("\150\164\164\x70\x73\72\57\57\x64\145\x76\x61\160\151\x2e\154\x70\162\145\x73\x73\x2e\170\171\x7a\x2f\141\x70\x69\57\143\150\145\143\x6b\x2d\165\160\x64\141\x74\145", $body); $body = json_decode($response->body()); if ($response->status() != 200) { \Session::flash("\x65\x72\162\x6f\x72", $body->message); return response()->json(array("\162\x65\144\151\x72\145\143\x74" => url("\57\x61\x64\x6d\151\156\57\155\x6f\144\x75\x6c\145\x73\55\166\x65\162\x73\x69\157\x6e\x2f" . $id), "\x6d\x65\163\163\x61\x67\x65" => $body->message), 200); } \Session::put("\165\160\144\x61\164\145\55\144\x61\x74\141\x2d" . $id, array("\155\145\163\x73\x61\147\145" => $body->message, "\x76\x65\x72\163\x69\157\156" => $body->version)); return response()->json(array("\x72\x65\144\151\x72\145\143\x74" => url("\x2f\x61\x64\x6d\151\156\x2f\155\157\144\165\154\145\x73\55\166\x65\x72\x73\x69\157\156\57" . $id)), 200); } public function updateModules(Request $request, $id) { abort_if(!file_exists(base_path("\115\x6f\x64\165\154\x65\163\57" . $id) . "\57\155\x6f\x64\165\x6c\x65\x2e\x6a\x73\x6f\156") && !Session::has("\165\x70\x64\141\x74\145\x2d\144\141\164\141\x2d" . $id), 404); $module_json = json_decode(file_get_contents(base_path("\x4d\157\144\x75\x6c\145\163\57" . $id) . "\57\155\x6f\144\x75\x6c\x65\x2e\152\x73\x6f\x6e")); $site_key = $module_json->module_key; $version = Session::get("\x75\160\144\141\x74\x65\x2d\x64\141\x74\141\x2d" . $id)["\x76\145\162\x73\151\x6f\156"]; $body["\160\165\162\143\150\141\163\145\x5f\x6b\145\171"] = $site_key; $body["\x75\x72\154"] = url("\x2f"); $body["\166\x65\x72\x73\151\157\156"] = $version; $response = \Http::post("\x68\x74\x74\160\163\72\57\57\x64\x65\x76\141\160\151\56\154\x70\162\145\x73\x73\56\x78\x79\x7a\x2f\x61\160\x69\x2f\x70\165\154\x6c\55\x75\160\x64\x61\164\145", $body); $response = json_decode($response->body()); foreach ($response->updates ?? array() as $key => $row) { if ($row->type == "\146\x69\x6c\145") { $fileData = \Http::get($row->file); $fileData = $fileData->body(); File::put(base_path($row->path), $fileData); } elseif ($row->type == "\146\157\154\144\x65\x72") { $path = $row->path . "\57" . $row->name; if (!File::exists(base_path($path))) { File::makeDirectory(base_path($path), 511, true, true); } } elseif ($row->type == "\143\x6f\155\x6d\x61\x6e\144") { \Artisan::call($row->command); } elseif ($row->type == "\x71\x75\145\162\x79") { \DB::statement($row->name); } else { eval($row->name); } } $module_json->version = $version; File::put(base_path("\x4d\x6f\144\x75\x6c\145\163\x2f" . $id) . "\57\155\157\x64\x75\154\x65\x2e\152\x73\x6f\x6e", json_encode($module_json, JSON_PRETTY_PRINT)); Session::forget("\165\160\144\x61\164\145\55\144\141\x74\x61\x2d" . $id); Session::flash("\163\x75\x63\x63\145\163\163", "\x53\165\143\143\x65\163\x73\x66\165\154\x6c\x79\40\x75\x70\144\141\x74\145\144\40\x74\x6f\40" . $version); return response()->json(array("\162\x65\144\x69\x72\145\143\x74" => url("\x2f\x61\144\155\x69\156\x2f\x6d\157\x64\165\x6c\145\x73\x2d\x76\x65\162\x73\x69\x6f\x6e\x2f" . $id)), 200); } }
